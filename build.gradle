plugins {
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '2.0.86'
    //id 'org.spongepowered.mixin' version '0.8.+'
    //id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'idea'
}

version = mod_version
group = mod_group_id

repositories {
    mavenLocal()
    maven {
        name = "BlameJared"
        url = "https://maven.blamejared.com/"
        content {
            includeGroup "com.blamejared.crafttweaker"
            includeGroup "org.openzen.zencode"
            includeGroup "mezz.jei"
        }
    }
    maven {
        name = "Modmaven"
        url = "https://modmaven.dev/"
        content {
            includeGroup "mezz.jei"
        }
    }
    maven {
        name = "Cursemaven"
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven { url "https://maven.ryanliptak.com/" }
    maven { // TOP
        url "https://maven.k-4u.nl"
    }
}

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

//mixin {
    //add sourceSets.main, "scguns.refmap.json"
    //config 'scguns.mixins.json'
//}

neoForge {
    version = project.neo_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }
    accessTransformers = project.files('src/main/resources/META-INF/accesstransformer.cfg')


    runs {
        client {
            client()
            //property 'mixin.env.disableRefMap', 'true'
            //property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            //systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            //property 'mixin.env.disableRefMap', 'true'
            //property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            //arg '-mixin.config=scguns.mixins.json'
            programArgument '--nogui'
            //systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            clientData()
            //property 'mixin.env.disableRefMap', 'true'
            //property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            //arg '-mixin.config=scguns.mixins.json'
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        configureEach {
            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            systemProperty 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        // define mod <-> source bindings
        // these are used to tell the game which sources are for which mod
        // multi mod projects should define one per mod
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

dependencies {
    implementation "curse.maven:framework-549225:5692398"
    implementation "curse.maven:curios-309927:5367944"
    implementation "curse.maven:geckolib-388172:5675221"
    //implementation fg.deobf("curse.maven:backpacked-352835:4725669")
    //compileOnly fg.deobf('curse.maven:controllable-317269:4598985')
    //annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    //compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"))
    //compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}"))
    //runtimeOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}"))
    //implementation fg.deobf("curse.maven:create-328085:5689514")
    //implementation fg.deobf("curse.maven:createaddition-439890:5658602")
    //implementation fg.deobf("curse.maven:shoulder-surfing-reloaded-243190:5455954")
    //implementation fg.deobf("curse.maven:farmers-delight-398521:5051242")
    //implementation fg.deobf("curse.maven:kotlin-for-forge-351264:5402061")
    //implementation fg.deobf("curse.maven:valkyrien-skies-258371:5212232")
    //implementation fg.deobf("curse.maven:jade-324717:5493390")
    //implementation fg.deobf("curse.maven:mmmmmmmmmmmm-225738:5710049")
    //implementation fg.deobf("curse.maven:selene-499980:5702363")
}

var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}

sourceSets.main.resources.srcDir generateModMetadata

neoForge.ideSyncTask generateModMetadata

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

allprojects {
    // Allow 400 errors.
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xmaxerrs" << "99999"
        }
    }
}